// Code generated by protoc-gen-go.
// source: iam/user/v1alpha1/directory.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	iam/user/v1alpha1/directory.proto
	iam/user/v1alpha1/repository.proto

It has these top-level messages:
	Credentials
	AuthenticationResponse
	NewUser
	UserCreated
	GetUser
	User
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// User credentials
type Credentials struct {
	// Username or email
	UserKey string `protobuf:"bytes,1,opt,name=user_key,json=userKey" json:"user_key,omitempty"`
	// Plain text password
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Credentials) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

func (m *Credentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Authentication response from the User Directory
type AuthenticationResponse struct {
	// The preferred user key by the directory
	UserKey string `protobuf:"bytes,1,opt,name=user_key,json=userKey" json:"user_key,omitempty"`
}

func (m *AuthenticationResponse) Reset()                    { *m = AuthenticationResponse{} }
func (m *AuthenticationResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationResponse) ProtoMessage()               {}
func (*AuthenticationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthenticationResponse) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Credentials)(nil), "deshboard.iam.user.v1alpha1.Credentials")
	proto.RegisterType((*AuthenticationResponse)(nil), "deshboard.iam.user.v1alpha1.AuthenticationResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserDirectory service

type UserDirectoryClient interface {
	// Authenticate a user against the directory
	Authenticate(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthenticationResponse, error)
}

type userDirectoryClient struct {
	cc *grpc.ClientConn
}

func NewUserDirectoryClient(cc *grpc.ClientConn) UserDirectoryClient {
	return &userDirectoryClient{cc}
}

func (c *userDirectoryClient) Authenticate(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := grpc.Invoke(ctx, "/deshboard.iam.user.v1alpha1.UserDirectory/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserDirectory service

type UserDirectoryServer interface {
	// Authenticate a user against the directory
	Authenticate(context.Context, *Credentials) (*AuthenticationResponse, error)
}

func RegisterUserDirectoryServer(s *grpc.Server, srv UserDirectoryServer) {
	s.RegisterService(&_UserDirectory_serviceDesc, srv)
}

func _UserDirectory_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deshboard.iam.user.v1alpha1.UserDirectory/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServer).Authenticate(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserDirectory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deshboard.iam.user.v1alpha1.UserDirectory",
	HandlerType: (*UserDirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _UserDirectory_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/user/v1alpha1/directory.proto",
}

func init() { proto.RegisterFile("iam/user/v1alpha1/directory.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4b, 0x85, 0x40,
	0x10, 0x87, 0x79, 0x11, 0x2f, 0xdb, 0xea, 0xb2, 0x87, 0x30, 0xbb, 0x94, 0x27, 0x4f, 0x2b, 0xe6,
	0x5f, 0x50, 0x79, 0xeb, 0x26, 0x74, 0xe9, 0x12, 0xa3, 0x3b, 0xe0, 0x92, 0xba, 0xcb, 0xcc, 0x5a,
	0x78, 0xe9, 0x6f, 0x8f, 0x15, 0x0c, 0x0f, 0x0f, 0x8f, 0xc3, 0xef, 0xe3, 0xe3, 0x63, 0xc4, 0xa3,
	0x81, 0x21, 0x9f, 0x18, 0x29, 0xff, 0x2e, 0xa0, 0x77, 0x1d, 0x14, 0xb9, 0x36, 0x84, 0xad, 0xb7,
	0x34, 0x2b, 0x47, 0xd6, 0x5b, 0x79, 0xaf, 0x91, 0xbb, 0xc6, 0x02, 0x69, 0x65, 0x60, 0x50, 0x01,
	0x56, 0x2b, 0x9c, 0x56, 0xe2, 0xea, 0x95, 0x50, 0xe3, 0xe8, 0x0d, 0xf4, 0x2c, 0xef, 0x44, 0x14,
	0xf6, 0xcf, 0x2f, 0x9c, 0xe3, 0xc3, 0xc3, 0x21, 0xbb, 0xac, 0x2f, 0xc2, 0xfd, 0x86, 0xb3, 0x4c,
	0x44, 0xe4, 0x80, 0xf9, 0xc7, 0x92, 0x8e, 0xcf, 0x96, 0xe9, 0xff, 0x4e, 0x4b, 0x71, 0xfb, 0x3c,
	0xf9, 0x2e, 0x58, 0x5a, 0xf0, 0xc6, 0x8e, 0x35, 0xb2, 0xb3, 0x23, 0xe3, 0x8e, 0xf0, 0xe9, 0x57,
	0xdc, 0xbc, 0x33, 0x52, 0xb5, 0xe6, 0xca, 0x41, 0x5c, 0x6f, 0x2c, 0x28, 0x33, 0xb5, 0x53, 0xae,
	0x36, 0xd9, 0x49, 0xb9, 0x4b, 0x9e, 0x4e, 0x7b, 0x39, 0x7e, 0x9c, 0x07, 0xae, 0x39, 0x2e, 0x6f,
	0x2a, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xb0, 0xb2, 0xc9, 0x4b, 0x01, 0x00, 0x00,
}
